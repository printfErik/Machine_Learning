# -*- coding: utf-8 -*-
"""hw1_slq_iter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KVm1ZwkbcBD81bG6nHRpoTXfzyZe8dYc

**Problem 6**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from numpy import linalg as LA



# implemented by richardson algorithm, iteration 500 times
def lsq_iter(iA,ib):
  # intially set mu
  normA = LA.norm(iA,ord = 2)
  mu = 1/(normA*normA)

  w_hat = lsq(iA,ib)

  # compute A transpose once
  AT = iA.transpose()

  # intially set w
  w = np.zeros((10,1))
  k[0] = 1
  wk_minus_w_hat_norm[0] = LA.norm(w - w_hat,ord = 2)
  for i in range(499):
    temp1 = np.matmul(iA,w)
    temp2 = np.matmul(AT,temp1-ib)
    temp3 = temp2 * mu
    w = w - temp3

    # updating plot vectors
    k[i+1] = i+2
    wk_minus_w_hat_norm[i+1] = LA.norm(w - w_hat,ord = 2)
  return w

# closed form solution 
def lsq(iA,ib):
  pinverseA = LA.pinv(iA) # compute pesudoinvese of martrix A
  return np.matmul(pinverseA,b) # return closed form solution



if __name__ == "__main__":

  # random generated 20*10 A matrix and 20-vector b
  A = np.random.rand(20,10)
  b = np.random.rand(20,1)

  # create two vectors for plotting
  k = np.zeros(500)
  wk_minus_w_hat_norm = np.zeros(500)

  richardson_algorithm_result = lsq_iter(A,b)
  closed_form_result = lsq(A,b)

  # plot
  plt.xlabel('k iterations')
  plt.ylabel(r'$\|w^{(k)} - \hat{w}\|$ value')
  plt.title('Richardson Algorithm')
  plt.plot(k, wk_minus_w_hat_norm, 'b',label = 'richardson')    
  plt.legend()

  plt.show()

  # show result
  print("Richardson Algorithm Result: ")
  print(richardson_algorithm_result)
  print("Closed form Result: ")
  print(closed_form_result)