# -*- coding: utf-8 -*-
"""hw4_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uFStGDzZ40otYKjHz3C6Bxgdx6dcypS7
"""

from sklearn import tree
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# read data
train_data = pd.read_csv('health_train.csv').to_numpy()
test_data = pd.read_csv('health_test.csv').to_numpy()

train_feature = train_data[:,:-1]
train_label = train_data[:,-1].reshape((-1,1))

test_feature = test_data[:,:-1]
test_label = test_data[:,-1].reshape((-1,1))

# training...
def train(feature_set,label_set,forest_size,feature_size):
  desion_trees = [0] * forest_size
  n = len(feature_set)
  num_feature = len(feature_set[0])
  for num_tree in range(forest_size):
    tree_list = np.random.choice(range(n), n)
    feat = feature_set[tree_list,:]
    label = label_set[tree_list,:]
    desion_tree = tree.DecisionTreeClassifier(criterion = 'gini',max_features=feature_size)
    desion_tree = desion_tree.fit(feat,label)
    desion_trees[num_tree] = desion_tree
  return desion_trees

# predict
def predict(desion_trees,feature_set,label_set):
  vote = 0
  for each_tree in desion_trees:
    vote += each_tree.predict(feature_set)
    pred = each_tree.predict(feature_set)
    pred = pred.reshape((-1,1))
  vote =  vote.reshape((-1,1))
  new_h = np.sign(vote)
  accuracy = sum(new_h == label_set) / len(new_h)
  return accuracy

desion_trees = train(train_feature,train_label,100,50)
accuracy = predict(desion_trees,test_feature,test_label)

# For problem 6 (b), vary the size of random feature sets

dt_vary_feat_size = [0] * 5
train_acc_vary_feat_size = [0] * 5
test_acc_vary_feat_size = [0] * 5
feature_set_size = [50,100,150,200,250]
for i,size in enumerate(feature_set_size):
  dt_vary_feat_size[i] = train(train_feature,train_label,20,size)
  train_acc_vary_feat_size[i] = predict(dt_vary_feat_size[i],train_feature,train_label)
  test_acc_vary_feat_size[i] = predict(dt_vary_feat_size[i],test_feature,test_label)
plt.plot(feature_set_size,train_acc_vary_feat_size,label = 'train')
plt.plot(feature_set_size,test_acc_vary_feat_size,label = 'test')
plt.xlabel('Size of Feature Set')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# For problem 6 (c), vary the number of decision trees

dt_vary_number_trees = [0] * 5
train_acc_vary_number_trees = [0] * 5
test_acc_vary_number_trees = [0] * 5
number_trees = [10,20,40,80,100]
for i,number in enumerate(number_trees):
  dt_vary_number_trees[i] = train(train_feature,train_label,number,250)
  train_acc_vary_number_trees[i] = predict(dt_vary_number_trees[i],train_feature,train_label)
  test_acc_vary_number_trees[i] = predict(dt_vary_number_trees[i],test_feature,test_label)
plt.plot(number_trees,train_acc_vary_number_trees,label = 'train')
plt.plot(number_trees,test_acc_vary_number_trees,label = 'test')
plt.xlabel('Number of Decision Trees')
plt.xticks(ticks = number_trees,labels = number_trees)
plt.ylabel('Accuracy')
plt.legend()
plt.show()



