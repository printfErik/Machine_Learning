# -*- coding: utf-8 -*-
"""hw4_boosting_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TT6AD77RUaik6SFCD3m35tCi47UuBMPc
"""

from test_score import score
import numpy as np
import matplotlib.pyplot as plt

# read data
true_values = np.genfromtxt('true_values_regression.csv', delimiter=',')
true_values = np.expand_dims(true_values, axis=1)

# compute threshold for checking if weak learner is good 
threshold = 0
# compute the average threshold
for i in range(100):
  np.random.shuffle(true_values)
  threshold += score(true_values)
threshold = threshold/100

# init data
scores = [0] * 10000 # error stores data error rate
h = [0] * 10000 # h is weak learner
percentage = np.sum(true_values == 0) / len(true_values)

# Keep adding weak learner to our model
i = 0
while i < 10000:
  np.random.shuffle(true_values)
  if score(true_values) < threshold:
    h[i] = np.copy(true_values)
    new_h = np.copy(h[0])
    if i != 0:     
      for j in range(1, i):
          new_h += h[j]
      new_h = new_h / i
      to_check = np.percentile(new_h, percentage*100)
      new_h[new_h < to_check] = 0
    scores[i] = score(new_h)
    print(scores[i])
    i += 1

# Plotting
plt.plot(scores)
plt.title('Score by Different Number of Weak Learners')
plt.xlabel('Numbers of weak learners')
plt.ylabel('Scores')
plt.show()